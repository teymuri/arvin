

name this-is-evaled-to-NIL (weil nix danach kommt)
name nextnil


name F
  lambda
    params
      name x 5
      name y (=> default is NIL)
      namepack others list 2 1 0 (default ist list 2 1 0)
    cons x cons y others

(wenn ich F so aufrufe:)
F
(passiert kein error weil y ist gebunden to NIL,
und sonst NIL fÃ¼r y im body der F auch passt, anders gesagt
errors passieren im body wenn da was nicht gemacht werden kann!)

F 4
(evaluiert zum LIST 4 NIL 2 1 0)
F 4 3
(=> LIST 4 3 2 1 0)

let
 y 9
 F 10 (=> this is x)
(F wird im kontext vom let aufgerufen, wo y kennt sich als 9,
so es kommt raus LIST 10 9 2 1 0)
(also wenn F ein argument sucht und nicht findet sucht sich den namen vom
environment drum herum und so weiter bis es irgendwo den namen findet, schlislich
ist jede funktion auch in irgend einem kontext aufgerufen)

(assum we have a function abs which takes an arg)
map abs list -1 2 -4 -1 4 (=>ist klar doc)

